"""
Django settings for TPV_public project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from django.urls import reverse_lazy

from pathlib import Path
from os import mkdir
from os.path import dirname, join, exists

SESSION_TIMEOUT = 5*60 # 5 minutes of user inactivity leads to user being logout
import environ
# Use 12factor inspired environment variables or from a file
env = environ.Env()

# Ideally move env file should be outside the git repo
# i.e. BASE_DIR.parent.parent
env_file = join(dirname(__file__), 'local.env')
if exists(env_file):
    environ.Env.read_env(str(env_file))

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent
TEMP_FILES = join(BASE_DIR,'..',  'temporary')
GIT_PATH = BASE_DIR
GIT_ENV_VAR="GIT_REV"

import platform
if platform.system() == 'Linux' or platform.system() == 'Darwin':
    PYTHON_PATH = join(BASE_DIR,  'env','bin','python3')
else:
    PYTHON_PATH = join(BASE_DIR,  '.venv','Scripts','python')

# EMAIL CONFIGURATION
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_BACKEND = 'utils.googleGmail.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = env('EMAIL_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_PASSW',cast=str)
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

# only for microsoft365 accounts
if "office365" in EMAIL_HOST:
    O365_CLIENT_SECRET = env('O365_CLIENT_SECRET')
    O365_TENANT_ID = env('O365_TENANT_ID')
    O365_CLIENT_ID = env('O365_CLIENT_ID')


# CELERY CONFIGURATION
# Celery Configuration Options
# save Celery task results in Django's database
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_BROKER_URL = env('CELERY_BROKER_URL')
# this allows you to schedule items in the Django admin.
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'
CELERY_TIMEZONE = env('TIME_ZONE')
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_SOFT_TIME_LIMIT = 25*60
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_RESULT_EXTENDED = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
SIGNATURE_KEY = env('SIGNATURE_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Must mention ALLOWED_HOSTS in production!
ALLOWED_HOSTS = [s.strip() for s in env('ALLOWED_HOSTS').split(',')]

PAGE_DNS=env("PAGE_DNS")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [join(BASE_DIR, 'static')]
STATIC_ROOT = join(BASE_DIR.parent,'static')
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "django_celery_results",
    'django_celery_beat',
    'django_plotly_dash.apps.DjangoPlotlyDashConfig',
    'crispy_forms',
    "crispy_bootstrap5",
    
    'embed_video',

    'TPV_public',
    'UsersAPP',
    'ProductsAPP',
]

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
        messages.DEBUG: 'alert-secondary',
        messages.INFO: 'alert-info',
        messages.SUCCESS: 'alert-success',
        messages.WARNING: 'alert-warning',
        messages.ERROR: 'alert-danger',
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_plotly_dash.middleware.BaseMiddleware',
      
]

#Add STATICFILES_FINDERS 
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",

    'django_plotly_dash.finders.DashAssetFinder',
    'django_plotly_dash.finders.DashComponentFinder',
    'django_plotly_dash.finders.DashAppDirectoryFinder',
]

PLOTLY_COMPONENTS = [

    # Common components (ie within dash itself) are automatically added

    # django-plotly-dash components
    'dpd_components',
]

#Add X_FRAME_OPTIONS = 'SAMEORIGIN' to settings.py to enable frames within HTML documents
X_FRAME_OPTIONS = 'SAMEORIGIN'

ROOT_URLCONF = 'TPV_public.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            join(BASE_DIR, 'templates'),
            # insert more TEMPLATE_DIRS here
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# settings for django-embed-video
TEMPLATE_CONTEXT_PROCESSORS = (
    'django.template.context_processors.request',
)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# end

WSGI_APPLICATION = 'TPV_public.wsgi.application'

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

POSTGRESQL_HOST = env('POSTGRESQL_HOST')
POSTGRESQL_PORT = env('POSTGRESQL_PORT')
POSTGRESQL_DB = env('POSTGRESQL_DB')
POSTGRESQL_USER = env('POSTGRESQL_USER')
POSTGRESQL_PASS = env('POSTGRESQL_PASS')
POSTGRESQL_BACKUP_PATH = join(GIT_PATH.parent,'DBBackups')
POSTGRESQL_BACKUP_FILE = POSTGRESQL_DB+'_backup_'
POSTGRESQL_BACKUP_NUMFILES = 3

if not exists(POSTGRESQL_BACKUP_PATH):
    mkdir(POSTGRESQL_BACKUP_PATH)

DATABASES = {
    # 'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': join(BASE_DIR,env('DATABASE_URL')),
    # }
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        "OPTIONS": {
            "passfile": join(dirname(__file__), 'pgpass.conf'),
        },
        'NAME': POSTGRESQL_DB,
        'USER' : POSTGRESQL_USER,
        'PASSWORD' : POSTGRESQL_PASS,
        'HOST' : POSTGRESQL_HOST,
        'PORT' : POSTGRESQL_PORT,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "UsersAPP.User"

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
  'DEFAULT_PERMISSION_CLASSES': [                     
    'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
  ],
}


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'es-es'

USE_I18N = True
USE_L10N = True

USE_TZ = True

TIME_ZONE = env('TIME_ZONE')
import pytz
TIME_ZONE_OBJ = pytz.timezone(TIME_ZONE)

#UPLOAD_TO = join(BASE_DIR,  'uploads')

MEDIA_ROOT = join(BASE_DIR,'media')
if not exists(MEDIA_ROOT):
    mkdir(MEDIA_ROOT)

MEDIA_URL = '/media/' # Public URL at the browser

LOCALE_PATHS = [ 
        join(BASE_DIR, "ProductsAPP/locale"), 
        join(BASE_DIR, "UsersAPP/locale"), 
        join(BASE_DIR, "templates/locale"),
    ]



# Crispy Form Theme - Bootstrap 4
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "home"
LOGIN_URL = 'login'
LOGOUT_URL = reverse_lazy("home")

import logging.config
# Log everything to the logs directory at the top
LOGFILE_ROOT = join(BASE_DIR,  'logs') #'/home/pi/MyHome/logs'
if not exists(LOGFILE_ROOT):
    mkdir(LOGFILE_ROOT)

# Reset logging
# (see http://www.caktusgroup.com/blog/2015/01/27/Django-Logging-Configuration-logging_config-default-settings-logger/)

LOGGING_CONFIG = None
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(pathname)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s'
        },
    },
    'handlers': {
        'django_log_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': join(LOGFILE_ROOT, 'django.log'),
            'maxBytes': 1024 * 1024,
            'backupCount': 1,
            'formatter': 'verbose'
        },
        'models_log_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': join(LOGFILE_ROOT, 'models.log'),
            'maxBytes': 100000,
            'backupCount': 1,
            'formatter': 'verbose'
        },
        'processes_log_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': join(LOGFILE_ROOT, 'processes.log'),
            'maxBytes': 10000,
            'backupCount': 1,
            'formatter': 'verbose'
        },
        'celery_log_file':{
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': join(LOGFILE_ROOT, 'celery.log'),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024,  # 1 mb

        },
        'users': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': join(LOGFILE_ROOT, 'users.log'),
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 10,
            'formatter': 'simple',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['django_log_file'],
            'propagate': False,
            'level': 'DEBUG',
        },
        'models': {
            'handlers': ['models_log_file'],
            'level': 'DEBUG',
        },
        'processes': {
            'handlers': ['processes_log_file'],
            'level': 'DEBUG',
        },
        "celery": {
            'handlers': ['celery_log_file'],
            'level': 'INFO',
        },
        'users': {
            'handlers': ['users'],
            'level': 'INFO',
        },
    }
}

logging.config.dictConfig(LOGGING)

import logging
logger = logging.getLogger("processes")

def readVersion(path='.version',default=None):
    try:
        f = open(path, 'r') 
    except FileNotFoundError:
        f = open(path, 'w')
        f.close()
        f = open(path, 'r') 
    except:
        text='Error opening the file ' + path
        logger.error(text)
    lines=f.readlines()
    f.close()
    if len(lines)>0:
        value=lines[0].split("=")[1]
        return value
    else:
        return default

GIT_REV=readVersion()        
pass

